import asyncio
import io
import pygame
import gtts
import json
from aiortc import RTCDataChannel



# ph√°t th√¥ng b√°o ra loa
async def speaker_output(
    dataChannel: RTCDataChannel,
    backend_server_future: asyncio.Future,
):
    pygame.mixer.init()
    backend_server = await backend_server_future

    while True:
        try:
            response = await backend_server.recv()
            if response is None:
                print("‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ backend server.")
                await asyncio.sleep(1)
                continue
            # ƒê·ª£i tin nh·∫Øn t·ª´ AI server
            # response = json.loads(response)

            print(f"üì• Nh·∫≠n ph·∫£n h·ªìi t·ª´ backend: {response}")

            # if response["content"] != "Unknow":
            #     print(dataChannel.readyState)
            #     dataChannel.send(json.dumps(response))
            #     print("da gui den dataChannel")

            #     # # Ph√°t ra loa
            #     tts = gtts.gTTS(response["content"], lang="vi")

            #     # L∆∞u v√†o file t·∫°m v√¨ pygame kh√¥ng h·ªó tr·ª£ ph√°t t·ª´ BytesIO
            #     audio = io.BytesIO()
            #     tts.write_to_fp(audio)
            #     audio.seek(0)

            #     # Kh·ªüi t·∫°o pygame ƒë·ªÉ ph√°t √¢m thanh
            #     pygame.mixer.init()
            #     pygame.mixer.music.load(audio, "mp3")
            #     pygame.mixer.music.play()

            #     # ƒê·ª£i ph√°t xong
            #     while pygame.mixer.music.get_busy():
            #         await asyncio.sleep(0.1)

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói trong speaker_output: {e}")
            return
